import { Client, ClientDashboardData, RecommendationResponse } from '../types/types';

// const API_BASE = 'http://127.0.0.1:8000/api';

export const fetchClients = async (): Promise<Client[]> => {
  // Mock data - replace with actual API call
  await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate loading
  return [
    { client_code: 1, name: '–ê–π–≥–µ—Ä–∏–º' },
    { client_code: 2, name: '–î–∞–Ω–∏—è—Ä' },
    { client_code: 3, name: '–ê—Å–µ–ª—å' },
    { client_code: 4, name: '–ê—Ä–º–∞–Ω' },
    { client_code: 5, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 6, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 7, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 8, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 9, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 10, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 11, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 12, name: '–ú–æ–ª–¥–∏—Ä' },
    { client_code: 13, name: '–ò–º–∞–Ω' },
  ];
};

export const fetchClientData = async (clientCode: number): Promise<ClientDashboardData> => {
  // Mock data - replace with actual API call
  await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate loading
  
  if (clientCode === 1) {
    return {
      client_code: 1,
      name: '–ê–π–≥–µ—Ä–∏–º',
      status: '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
      age: 28,
      city: '–ê–ª–º–∞—Ç—ã',
      avg_monthly_balance_KZT: 250000.00,
      total_spending_3m: 750000.00,
      top_categories: [
        { category: '–¢–∞–∫—Å–∏', amount: 85000.00 },
        { category: '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', amount: 65000.00 },
        { category: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', amount: 50000.00 }
      ]
    };
  }
  
  // Mock data for other clients
  return {
    client_code: clientCode,
    name: clientCode === 2 ? '–î–∞–Ω–∏—è—Ä' : clientCode === 3 ? '–ê—Å–µ–ª—å' : clientCode === 4 ? '–ê—Ä–º–∞–Ω' : '–ú–æ–ª–¥–∏—Ä',
    status: '–û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
    age: 25 + clientCode,
    city: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω',
    avg_monthly_balance_KZT: 150000.00 + clientCode * 10000,
    total_spending_3m: 450000.00 + clientCode * 50000,
    top_categories: [
      { category: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', amount: 45000.00 + clientCode * 5000 },
      { category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', amount: 35000.00 + clientCode * 3000 },
      { category: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', amount: 25000.00 + clientCode * 2000 }
    ]
  };
};

export const generateRecommendation = async (clientCode: number): Promise<RecommendationResponse> => {
  // Mock data - replace with actual API call
  await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate processing
  
  if (clientCode === 1) {
    return {
      product: '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π',
      push_notification: '–ê–π–≥–µ—Ä–∏–º, –≤ –∞–≤–≥—É—Å—Ç–µ –≤—ã —Å–¥–µ–ª–∞–ª–∏ 15 –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ —Ç–∞–∫—Å–∏ –Ω–∞ 85 000 ‚Ç∏. –° –∫–∞—Ä—Ç–æ–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–µ—Ä–Ω—É–ª–∏ –±—ã ‚âà3 400 ‚Ç∏. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. üöÄ'
    };
  }
  
  return {
    product: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞',
    push_notification: `–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ. –° –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã! üí≥`
  };
};