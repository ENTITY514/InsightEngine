import type { Client, ClientDashboardData, RecommendationResponse } from "../types/types"

// Mock API functions - replace with actual API calls
export const fetchClients = async (): Promise<Client[]> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1000))

  return [
    { client_code: 1, name: "–ê–ª–µ–∫—Å–µ–π" },
    { client_code: 2, name: "–ú–∞—Ä–∏—è" },
    { client_code: 3, name: "–î–º–∏—Ç—Ä–∏–π" },
    { client_code: 4, name: "–ï–ª–µ–Ω–∞" },
    { client_code: 5, name: "–ê–Ω–¥—Ä–µ–π" },
    { client_code: 6, name: "–û–ª—å–≥–∞" },
    { client_code: 7, name: "–°–µ—Ä–≥–µ–π" },
    { client_code: 8, name: "–¢–∞—Ç—å—è–Ω–∞" },  
    { client_code: 9, name: "–ò–≥–æ—Ä—å" },
    { client_code: 10, name: "–ù–∞—Ç–∞–ª—å—è" },
    { client_code: 11, name: "–í–∏–∫—Ç–æ—Ä" },
  ]
}

export const fetchClientData = async (clientCode: number): Promise<ClientDashboardData> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 800))

  const mockData: Record<number, ClientDashboardData> = {
    1: {
      client_code: 1,
      name: "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤",
      status: "–°—Ç—É–¥–µ–Ω—Ç",
      age: 35,
      city: "–ê–ª–º–∞—Ç—ã",
      avg_monthly_balance_KZT: 2500000,
      total_spending_3m: 1800000,
      top_categories: [
        { category: "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", amount: 450000 },
        { category: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", amount: 320000 },
        { category: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", amount: 280000 },
      ],
    },
    2: {
      client_code: 2,
      name: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
      status: "–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç",
      age: 42,
      city: "–ù—É—Ä-–°—É–ª—Ç–∞–Ω",
      avg_monthly_balance_KZT: 5200000,
      total_spending_3m: 3100000,
      top_categories: [
        { category: "–®–æ–ø–ø–∏–Ω–≥", amount: 850000 },
        { category: "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", amount: 620000 },
        { category: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", amount: 580000 },
      ],
    },
  }

  return mockData[clientCode] || mockData[1]
}

export const generateRecommendation = async (clientCode: number): Promise<RecommendationResponse> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 2000))

  const allRecommendations = [
    {
      product: "–ü—Ä–µ–º–∏—É–º –ö–∞—Ä—Ç–∞",
      push_notification: "–ü–æ–ª—É—á–∏—Ç–µ 5% –∫—ç—à–±—ç–∫ –Ω–∞ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Å –Ω–∞—à–µ–π –ü—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–æ–π!",
    },
    {
      product: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ü–æ—Ä—Ç—Ñ–µ–ª—å",
      push_notification: "–£–≤–µ–ª–∏—á—å—Ç–µ —Å–≤–æ–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –Ω–∞ 12% –≥–æ–¥–æ–≤—ã—Ö —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
    },
    {
      product: "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç",
      push_notification: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç –ø–æ–¥ 8.5% –≥–æ–¥–æ–≤—ã—Ö —Å –±—ã—Å—Ç—Ä—ã–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç",
    },
    {
      product: "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞",
      push_notification:
        "–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ. –° –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã! üí≥",
    },
  ]

  return {
    recommendations: allRecommendations,
  }
}
