import os
import google.generativeai as genai
from dotenv import load_dotenv
import locale
from typing import Dict, Any

# ===================================================================
# 1. Конфигурация
# ===================================================================

# Загрузка конфигурации
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise ValueError("GEMINI_API_KEY не найден в файле .env")

genai.configure(api_key=api_key)
model = genai.GenerativeModel('gemini-1.5-flash')

# Настройка локали для корректного форматирования
try:
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
except locale.Error:
    print("Не удалось установить русскую локаль ru_RU.UTF-8.")

def format_currency(amount: float) -> str:
    """Форматирует число как валюту с пробелами и знаком тенге."""
    return f"{int(amount):,} ₸".replace(",", " ")

# ===================================================================
# 2. Модуль создания "Зацепки" (Персонального контекста)
# ===================================================================

def _create_hook(product_name: str, data: Dict[str, Any]) -> str:
    """
    Создает одну, но точную и персональную деталь о клиенте.
    Это основа для уникальности каждого уведомления.
    """
    profile = data['profile']
    metrics = data['metrics']
    
    # Расширяем вариативность "зацепок" для разных сценариев
    if product_name in ["Кредитная карта", "Премиальная карта"]:
        if metrics.get("top_categories"):
            top_cats = [cat['category'] for cat in metrics['top_categories']]
            return f"Мы заметили, что вы чаще всего тратите деньги в категориях: {', '.join(top_cats)}."
    
    if product_name == "Карта для путешествий":
        transactions = data['transactions_df']
        travel_spending = transactions[transactions['category'].isin(['Путешествия', 'Такси', 'Отели'])]['amount'].sum()
        if travel_spending > 10000:
            return f"За последние 3 месяца ваши расходы на такси и отели составили {format_currency(travel_spending)}."
    
    if "Депозит" in product_name or "Инвестиции" in product_name:
        balance = profile.get('avg_monthly_balance_KZT', 0)
        if balance > 300000:
            return f"У вас на счете стабильно сохраняется остаток около {format_currency(balance)}."
            
    # НОВЫЙ ВАРИАНТ "ЗАЦЕПКИ"
    if product_name == "Подтверждение выгоды":
        try:
            current_card_name = data['transactions_df']['product'].mode()[0]
            return f"Вы активно пользуетесь картой «{current_card_name}»."
        except (KeyError, IndexError):
            return "Вы активно пользуетесь нашими услугами."

    return "Мы проанализировали ваши финансы за последние 3 месяца."

# ===================================================================
# 3. Главная функция-генератор
# ===================================================================

def generate_push_notification(product_name: str, full_data: Dict[str, Any], benefit: float) -> str:
    """
    Генерирует уникальное уведомление, давая ИИ творческую свободу
    в рамках строгих правил.
    """
    profile = full_data['profile']
    
    hook = _create_hook(product_name, full_data)
    
    if product_name == "Подтверждение выгоды":
        task = (
            f"Сообщить, что его текущая карта — лучший выбор. "
            f"Подчеркнуть, что она уже принесла ему {format_currency(benefit)} выгоды за 3 месяца. "
            f"Цель — укрепить доверие, а не продать."
        )
    elif product_name == "Кредит наличными":
        task = (
            f"Предложить ему кредит наличными, чтобы помочь реализовать крупную цель или решить финансовую задачу. "
            f"Подчеркнуть, что это удобный инструмент для достижения желаемого, а не просто 'деньги'. "
            f"Цель — позитивно представить продукт как решение."
        )
    else:
        task = (
            f"Предложить ему продукт «{product_name}». "
            f"Объяснить, что с этим продуктом его ожидаемая выгода за 3 месяца могла бы составить {format_currency(benefit)}. "
            f"Цель — показать упущенную возможность и предложить решение."
        )

    # Улучшенный и более гибкий промпт
    prompt = f"""
Ты — финансовый советник и копирайтер в современном банке. Твоя цель — создать короткое, полезное и человечное push-уведомление.

# ИНФОРМАЦИЯ О КЛИЕНТЕ:
- Имя: {profile['name']}
- Возраст: {profile['age']}
- Статус: {profile['status']}

# КОНТЕКСТ И ЗАДАЧА:
- Наблюдение (факт из жизни клиента): {hook}
- Цель сообщения: {task}
- Рекомендация по тону: Учитывай возраст и статус клиента. Для «Студентов» и «Зарплатных клиентов» используй более простой и дружелюбный тон. Для «Премиальных» — более сдержанный, но не менее полезный.

# ПРАВИЛА (неукоснительно):
1.  **Стиль:** Обращение на «вы» с маленькой буквы. Тон доброжелательный, как совет от друга. Важная информация — в начале.
2.  **Структура:** Начни с наблюдения, затем объясни, как наш продукт решает задачу клиента. Заверши призывом к действию.
3.  **Длина:** Строго 180–220 символов.
4.  **Формат:** Без КАПСА. Максимум один восклицательный знак, только если он действительно уместен. Допустим один эмодзи в конце, который отражает суть. Суммы форматируй так: 150 000 ₸.
5.  **Запрещено:** Не используй пассивный залог и фразы вроде "мы проанализировали". Покажи результат анализа, а не говори о нем. Избегай клише и повторяющихся фраз. Сделай текст максимально уникальным.

Напиши только финальный текст уведомления и ничего более.
"""
    
    try:
        response = model.generate_content(prompt)
        # Дополнительная очистка от артефактов модели
        return response.text.strip().replace('"', '').replace('*', '')
    except Exception as e:
        print(f"Ошибка при вызове Gemini API: {e}")
        return f"{profile['name']}, у нас есть выгодное предложение по продукту «{product_name}». Узнайте подробности в приложении."
